{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"final_notebook_v01","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"0JYFiJwNsgYD","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":88},"executionInfo":{"status":"ok","timestamp":1599135591501,"user_tz":-60,"elapsed":1868,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}},"outputId":"fe143eed-a71d-4ed4-aed2-e47ac808f25d"},"source":["#Modules for data analysis\n","import numpy as np\n","import pandas as pd\n","from sklearn.linear_model import LinearRegression\n","from scipy.stats import chi2_contingency, spearmanr\n","\n","\n","#Modules for plotting and data visulisation\n","import matplotlib.pyplot as plt\n","import matplotlib.cm as cm\n","import seaborn as sns\n","\n","%matplotlib inline\n","  \n","#Modules for machine learning\n","\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import accuracy_score\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import classification_report\n","from sklearn import model_selection\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn import svm\n","from sklearn.linear_model import SGDClassifier\n","\n","\n","from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"pn7lBQ7vr9WD","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599135593779,"user_tz":-60,"elapsed":1658,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}}},"source":["list_of_skipped_cols = [0,1,2,3,4,5,6,7,8,9] + [60 + 11*l for l in range(5)] + [115]\n","used_cols = [x for x in np.arange(116) if x not in list_of_skipped_cols]\n","\n","df0 = pd.read_excel(\"/content/gdrive/My Drive/Colab Notebooks/2020_Intern_12__Tâ€‹RI01_Comp/2019_01_20_General Preksha (Responses).xlsx\")\n","#df0 - uncomment to check if df0 is accurate"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"N-jOnTsUY6fn","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599135593780,"user_tz":-60,"elapsed":1125,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}}},"source":["#Create a list of keys and a dictionary comprehension to create all 10 dataframes in one go\n","dfs = [\"df1\",\"df2\",\"df3\",\"df4\",\"df5\",\"df6\",\"df7\",\"df8\",\"df9\",\"df10\"]\n","\n","d = {df: pd.DataFrame(df0.iloc[:,used_cols[10*n:10*(n+1)]]) for n,df in enumerate(dfs)}\n","\n","#Easier to concat if in list\n","list_of_dfs = []\n","for df in d:\n","  list_of_dfs.append(d[df])\n","\n","#The below for loop is done for renaming and because in df8 and df10 sections of the excel sheet, \n","#two questions have been swapped by accident\n","for n,i in enumerate(list_of_dfs):\n","\n","  if (n == 0):\n","    df1_cols = i.columns\n","\n","  elif (n == 7 or n == 9):\n","    columns_to_be_used = list(df1_cols)\n","    columns_to_be_used[6], columns_to_be_used[7] = columns_to_be_used[7], columns_to_be_used[6]\n","    i.columns = columns_to_be_used\n","\n","  else:\n","    i.columns = df1_cols\n","\n","\n","#Combine all ten dataframes\n","df = pd.concat(list_of_dfs, ignore_index=True)\n","\n","#Some checks - shape, column names, a few columns and rows and lastly df overall\n","#print(df.shape)\n","#print(df.columns)\n","#print(df.iloc[-15:,0])\n","#print(df.iloc[-10:,-1:])\n","#print(df.iloc[-1:,7:])\n","#df"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"YeIUr1y5Zvyq","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599135594301,"user_tz":-60,"elapsed":1135,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}}},"source":["is_NaN = df.isnull()\n","row_has_NaN = is_NaN.any(axis=1)\n","rows_with_NaN = df[row_has_NaN]\n","rows_with_NaN # display rows with NaN\n","\n","#Checking for invalid values\n","#print(df.iloc[128,4])\n","#print(df.iloc[128,7])\n","#print(df.iloc[253,6])\n","#print(df.iloc[257,1])\n","#print(df.iloc[382,8])\n","#print(df.iloc[517,3])\n","\n","condition = df <= 4\n","df = df.where(condition)\n","\n","#Checking if invalid values have been changed to nan\n","#print(df.iloc[128,4])\n","#print(df.iloc[128,7])\n","#print(df.iloc[253,6])\n","#print(df.iloc[257,1])\n","#print(df.iloc[382,8])\n","#print(df.iloc[517,3])\n","\n","df = df.dropna(how='any')\n","#df.shape"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ot64ykgBeKAr","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599135596053,"user_tz":-60,"elapsed":778,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}}},"source":["X = df.iloc[:, :-1]\n","#X - uncomment to see X"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"NeF8EqkYePfl","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599135597580,"user_tz":-60,"elapsed":912,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}}},"source":["y = df.iloc[:, -1]\n","#y - uncomment to see y"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"4pxWOcHoeUkp","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599135599740,"user_tz":-60,"elapsed":1918,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}}},"source":["fidelity_ratings = X.iloc[:,:6]\n","#fidelity_ratings - uncomment to see fidelity_ratings"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"DBNU95k_eq2T","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599135600392,"user_tz":-60,"elapsed":1238,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}},"outputId":"3dd13d3c-5610-46c7-f05d-44b4866a205e"},"source":["fidelity_ques_avgs = list(fidelity_ratings.mean(axis=0))\n","fidelity_ques_std_devs = list(fidelity_ratings.std(axis=0))\n","#print(fidelity_ratings.mean(axis=0)) - uncomment to display each question with its avg\n","#print(fidelity_ratings.std(axis=0)) - uncomment to display each question with its std dev\n","\n","fidelity_overall_avg = np.mean(np.array(fidelity_ques_avgs))\n","fidelity_overall_std_dev = np.mean(np.array(fidelity_ques_std_devs))\n","\n","print(\"Overall fidelity avg and std dev: %f and %f\"  %(fidelity_overall_avg,fidelity_overall_std_dev))"],"execution_count":8,"outputs":[{"output_type":"stream","text":["Overall fidelity avg and std dev: 3.014450 and 0.997604\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9r0RbIUWfeuf","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599135601598,"user_tz":-60,"elapsed":1270,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}}},"source":["intelligibility_ratings = X.iloc[:,6:9]\n","# intelligibility_ratings - uncomment to see intelligibility_ratings"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"iuyaW0BPg1Y3","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599135602239,"user_tz":-60,"elapsed":722,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}},"outputId":"39b62a42-4a3b-45fa-d98d-cac209b455d7"},"source":["intelligibility_ques_avgs = list(intelligibility_ratings.mean(axis=0))\n","intelligibility_ques_std_devs = list(intelligibility_ratings.std(axis=0))\n","\n","#print(intelligibility_ratings.mean(axis=0)) - uncomment to display each question with its avg\n","#print(intelligibility_ratings.std(axis=0)) - uncomment to display each question with its std dev\n","\n","intelligibility_overall_avg = np.mean(np.array(intelligibility_ques_avgs))\n","intelligibility_overall_std_dev = np.mean(np.array(intelligibility_ques_std_devs))\n","\n","print(\"Overall intelligibility avg and std dev: %f and %f\"  %(intelligibility_overall_avg,intelligibility_overall_std_dev))"],"execution_count":10,"outputs":[{"output_type":"stream","text":["Overall intelligibility avg and std dev: 2.840066 and 1.032437\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"xhp2K-j5hJAQ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599135604181,"user_tz":-60,"elapsed":1356,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}},"outputId":"5376842b-e049-465c-fb95-a9e1d61ab495"},"source":["complexity_mean = y.mean()\n","complexity_std_dev = y.std()\n","\n","print(\"Overall complexity avg and std dev: %f and %f\"  %(complexity_mean,complexity_std_dev))"],"execution_count":11,"outputs":[{"output_type":"stream","text":["Overall complexity avg and std dev: 1.770443 and 1.275437\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"LIv-lJ7xmm99","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599135604820,"user_tz":-60,"elapsed":760,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}}},"source":["x1 = list(fidelity_ratings.mean(axis=1)) # list of avgs of all 6 fidelity questions for each entry\n","x2 = list(intelligibility_ratings.mean(axis=1)) # list of avgs of all 3 intelligibility questions for each entry\n","y_use = y.values\n"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"wZ69_nW0nJEW","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599135606215,"user_tz":-60,"elapsed":898,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}},"outputId":"93694165-7f29-4d9e-ae5d-9ff577385b26"},"source":["#Some regression based statistics\n","\n","pmcc_matrix = np.corrcoef([x1,x2,y])\n","\n","#Checking\n","#print(pmcc_matrix)\n","\n","print(\"Fidelity and complexity PMCC: %f, intelligibility and complexity PMCC: %f, fidelity and intelligibility PMCC : %f\"  %(pmcc_matrix[0][2], pmcc_matrix[1][2], pmcc_matrix[0][1]))\n","\n","#Very weak negative correlations between the pairs (fidelity,complexity) and (intelligibility,complexity)"],"execution_count":13,"outputs":[{"output_type":"stream","text":["Fidelity and complexity PMCC: -0.109149, intelligibility and complexity PMCC: -0.065522, fidelity and intelligibility PMCC : 0.784921\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"t75xuCnvnRFo","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"status":"ok","timestamp":1599135607706,"user_tz":-60,"elapsed":879,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}},"outputId":"97ddb63c-801c-4607-f872-ced5be9c210e"},"source":["#The Spearman's rank coefficients can be calculated\n","\n","Spearman_fid_comp = spearmanr(x1,y)[0]\n","Spearman_int_comp = spearmanr(x2,y)[0]\n","Spearman_fid_int = spearmanr(x1,x2)[0]\n","\n","print(\"Fidelity and complexity Spearman's rank coefficient: %f, intelligibility and complexity Spearman's rank coefficient: %f, fidelity and intelligibility Spearman's rank coefficient: %f\" %(Spearman_fid_comp,Spearman_int_comp,Spearman_fid_int))\n"],"execution_count":14,"outputs":[{"output_type":"stream","text":["Fidelity and complexity Spearman's rank coefficient: -0.148509, intelligibility and complexity Spearman's rank coefficient: -0.094476, fidelity and intelligibility Spearman's rank coefficient: 0.780363\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nyVTNmvjnV5L","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599135609519,"user_tz":-60,"elapsed":1295,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}},"outputId":"9855cb95-2d71-4965-dcc0-6c6947b1f4b2"},"source":["#R^2 values to be calculated to examine multi-collinearity\n","\n","x_fid = np.array(x1).reshape(-1, 1)\n","x_int = np.array(x2).reshape(-1, 1)\n","\n","linear_model_fid_comp = LinearRegression().fit(x_fid,y)\n","\n","linear_model_int_comp = LinearRegression().fit(x_int,y)\n","\n","print(\"Fidelity effect on complexity R^2: %f, intelligibility effect on complexity R^2: %f \"  %(linear_model_fid_comp.score(x_fid,y),linear_model_int_comp.score(x_int,y)))\n","\n"],"execution_count":15,"outputs":[{"output_type":"stream","text":["Fidelity effect on complexity R^2: 0.011913, intelligibility effect on complexity R^2: 0.004293 \n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ehUlLRENwVGD","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"status":"ok","timestamp":1599135611302,"user_tz":-60,"elapsed":1272,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}},"outputId":"05f1c72a-5590-47d8-c9a0-78c7dda785b3"},"source":["print(\"Simple linear regression - Fidelity (x1) and complexity (y) model y = %f*x1 + %f, Intelligibility (x2) and complexity (y) model y = %f*x2 + %f\" %(linear_model_fid_comp.coef_,linear_model_fid_comp.intercept_,linear_model_int_comp.coef_,linear_model_int_comp.intercept_))"],"execution_count":16,"outputs":[{"output_type":"stream","text":["Simple linear regression - Fidelity (x1) and complexity (y) model y = -0.177626*x1 + 2.305888, Intelligibility (x2) and complexity (y) model y = -0.095356*x2 + 2.041261\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"U6zJO2IJwbtj","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"status":"ok","timestamp":1599135612875,"user_tz":-60,"elapsed":808,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}},"outputId":"c8d6883b-4025-4bb2-babf-167cd26b1920"},"source":["x_inputs = [[i,j] for i,j in zip(x1,x2)]\n","\n","#Checking\n","#print(x_inputs)\n","\n","# m_l_r_m_f_c  stands for multiple_linear_regression_model_for_comp \n","m_l_r_m_f_c = LinearRegression().fit(x_inputs,y)\n","\n","print(\"Multiple linear regression overall model for complexity - Fidelity (x1), Intelligibility (x2), Complexity (y), y = %f*x1 (+) %f*x2 + %f, R^2 value is %f\" %(m_l_r_m_f_c.coef_[0],m_l_r_m_f_c.coef_[1],m_l_r_m_f_c.intercept_,m_l_r_m_f_c.score(x_inputs,y)))"],"execution_count":17,"outputs":[{"output_type":"stream","text":["Multiple linear regression overall model for complexity - Fidelity (x1), Intelligibility (x2), Complexity (y), y = -0.244675*x1 (+) 0.076390*x2 + 2.291050, R^2 value is 0.012971\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"pOr_FMUCwhB3","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":80},"executionInfo":{"status":"ok","timestamp":1599135614461,"user_tz":-60,"elapsed":778,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}},"outputId":"707bce8b-f3c7-4a13-8b55-8019160719f7"},"source":["#Statistics in terms of classification\n","\n","#For overall fidelity and intelligibility, there are four categories as they are averages - thus there are decimals\n","#For complexity, each of the values is discrete\n","\n","categories_fid = {'0-1': [len([i for i in x1 if (i >= 0 and i < 1)])], '1-2': [len([i for i in x1 if (i >= 1 and i < 2)])], '2-3': [len([i for i in x1 if (i >= 2 and i < 3)])], '3-4': [len([i for i in x1 if (i >= 3 and i <= 4)])]}\n","\n","df_fid_categories = df.from_dict(categories_fid)\n","df_fid_categories"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0-1</th>\n","      <th>1-2</th>\n","      <th>2-3</th>\n","      <th>3-4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>9</td>\n","      <td>100</td>\n","      <td>285</td>\n","      <td>621</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   0-1  1-2  2-3  3-4\n","0    9  100  285  621"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"xJBias0BufoU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":80},"executionInfo":{"status":"ok","timestamp":1599135617139,"user_tz":-60,"elapsed":1593,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}},"outputId":"4d5dfd9b-c5cf-4df7-9a7e-8870b059a9c1"},"source":["categories_int = {'0-1': [len([i for i in x2 if (i >= 0 and i < 1)])], '1-2': [len([i for i in x2 if (i >= 1 and i < 2)])], '2-3': [len([i for i in x2 if (i >= 2 and i < 3)])], '3-4': [len([i for i in x2 if (i >= 3 and i <= 4)])]}\n","\n","df_int_categories = df.from_dict(categories_int)\n","df_int_categories"],"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0-1</th>\n","      <th>1-2</th>\n","      <th>2-3</th>\n","      <th>3-4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>16</td>\n","      <td>122</td>\n","      <td>304</td>\n","      <td>573</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   0-1  1-2  2-3  3-4\n","0   16  122  304  573"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"XJnQAJnCvmuv","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":80},"executionInfo":{"status":"ok","timestamp":1599135619051,"user_tz":-60,"elapsed":706,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}},"outputId":"402d0ff8-dd38-4540-a192-9534c7e4b1e7"},"source":["categories_comp = {'0': [len([i for i in y_use if (i == 0)])], '1': [len([i for i in y_use if (i == 1)])], '2': [len([i for i in y_use if (i == 2)])], '3': [len([i for i in y_use if (i == 3)])], '4': [len([i for i in y_use if (i == 4)])]}\n","\n","df_comp_categories = df.from_dict(categories_comp)\n","df_comp_categories"],"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>203</td>\n","      <td>250</td>\n","      <td>248</td>\n","      <td>205</td>\n","      <td>109</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     0    1    2    3    4\n","0  203  250  248  205  109"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"xtnyKK0K5aMm","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"status":"ok","timestamp":1599135621214,"user_tz":-60,"elapsed":742,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}},"outputId":"ed8c460d-4fe3-4196-8766-4e016ccc28a6"},"source":["#Now, each of the subparameters can be considered - the scale will be discrete\n","\n","fid1, fid2, fid3, fid4, fid5, fid6 = fidelity_ratings.iloc[:,0].values, fidelity_ratings.iloc[:,1].values, fidelity_ratings.iloc[:,2].values, fidelity_ratings.iloc[:,3].values, fidelity_ratings.iloc[:,4].values, fidelity_ratings.iloc[:,5].values\n","\n","categories_fid_subparams = []\n","\n","for j in [fid1, fid2, fid3, fid4, fid5, fid6]:\n","  categories_fid_subparams.append({'0': [len([i for i in j if (i == 0)])], '1': [len([i for i in j if (i == 1)])], '2': [len([i for i in j if (i == 2)])], '3': [len([i for i in j if (i == 3)])], '4': [len([i for i in j if (i == 4)])]})\n","\n","df_fid_sub_params = df.from_dict(categories_fid_subparams)\n","df_fid_sub_params = df_fid_sub_params.rename(index={0: 'fid1', 1: 'fid2', 2:'fid3', 3: 'fid4', 4: 'fid5', 5: 'fid6'})\n","\n","for col in df_fid_sub_params.columns:\n","  df_fid_sub_params[col] = df_fid_sub_params[col].str.get(0)\n","df_fid_sub_params"],"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>fid1</th>\n","      <td>18</td>\n","      <td>79</td>\n","      <td>179</td>\n","      <td>344</td>\n","      <td>395</td>\n","    </tr>\n","    <tr>\n","      <th>fid2</th>\n","      <td>11</td>\n","      <td>69</td>\n","      <td>142</td>\n","      <td>357</td>\n","      <td>436</td>\n","    </tr>\n","    <tr>\n","      <th>fid3</th>\n","      <td>16</td>\n","      <td>91</td>\n","      <td>195</td>\n","      <td>332</td>\n","      <td>381</td>\n","    </tr>\n","    <tr>\n","      <th>fid4</th>\n","      <td>16</td>\n","      <td>67</td>\n","      <td>190</td>\n","      <td>364</td>\n","      <td>378</td>\n","    </tr>\n","    <tr>\n","      <th>fid5</th>\n","      <td>21</td>\n","      <td>84</td>\n","      <td>209</td>\n","      <td>386</td>\n","      <td>315</td>\n","    </tr>\n","    <tr>\n","      <th>fid6</th>\n","      <td>17</td>\n","      <td>65</td>\n","      <td>135</td>\n","      <td>358</td>\n","      <td>440</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       0   1    2    3    4\n","fid1  18  79  179  344  395\n","fid2  11  69  142  357  436\n","fid3  16  91  195  332  381\n","fid4  16  67  190  364  378\n","fid5  21  84  209  386  315\n","fid6  17  65  135  358  440"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"Q-L5hbQ41PKo","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":142},"executionInfo":{"status":"ok","timestamp":1599135623512,"user_tz":-60,"elapsed":1531,"user":{"displayName":"Rahul Banerjee","photoUrl":"","userId":"02868075930645419834"}},"outputId":"0bb1ab92-59a0-4c48-8842-9a665f7f851a"},"source":["int1, int2, int3 = intelligibility_ratings.iloc[:,0].values, intelligibility_ratings.iloc[:,1].values, intelligibility_ratings.iloc[:,2].values\n","\n","categories_int_subparams = []\n","\n","for j in [int1, int2, int3]:\n","  categories_int_subparams.append({'0': [len([i for i in j if (i == 0)])], '1': [len([i for i in j if (i == 1)])], '2': [len([i for i in j if (i == 2)])], '3': [len([i for i in j if (i == 3)])], '4': [len([i for i in j if (i == 4)])]})\n","\n","df_int_sub_params = df.from_dict(categories_int_subparams)\n","df_int_sub_params = df_int_sub_params.rename(index={0: 'int1', 1: 'int2', 2:'int3'})\n","for col in df_int_sub_params.columns:\n","  df_int_sub_params[col] = df_int_sub_params[col].str.get(0)\n","df_int_sub_params"],"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>int1</th>\n","      <td>19</td>\n","      <td>96</td>\n","      <td>190</td>\n","      <td>370</td>\n","      <td>340</td>\n","    </tr>\n","    <tr>\n","      <th>int2</th>\n","      <td>33</td>\n","      <td>91</td>\n","      <td>232</td>\n","      <td>364</td>\n","      <td>295</td>\n","    </tr>\n","    <tr>\n","      <th>int3</th>\n","      <td>19</td>\n","      <td>88</td>\n","      <td>235</td>\n","      <td>375</td>\n","      <td>298</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       0   1    2    3    4\n","int1  19  96  190  370  340\n","int2  33  91  232  364  295\n","int3  19  88  235  375  298"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"NuqcJh4A3jor","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}